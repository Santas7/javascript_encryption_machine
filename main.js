class ShipherShmith{
    constructor(){
        this._simv = [
            ['√è', '∆í'], // aA
            ['·∫Ø', '‚úØ'], // bB
            ['Áà™', '¬¢'], // cC
            ['√∂', '‚Ç§'], // dD
            ['„ÉÜ', '‚ôØ'], // eE
            ['√Ñ', '‚Ç£'], // fF
            ['‚Ç¶', '‚ôú'], // gG
            ['‚Ç∞', '‚ó≠'], // hH

            ['…Ä', '‚óà'], // iI
            ['◊ß', '‚ôü'],
            ['≈â', '‡•¨'], // kK
            ['·∫ç', '‚ãµ'], // lL
            ['Êñπ', '‚ôù'], // mM
            ['Ôø•', '‚äæ'], // nN
            ['ƒæ', 'Ÿ•'], // oO
            ['·∫Ö', '‚ÅÇ'], // pP

            ['·∫µ', '‚ò£Ô∏è'], // qQ
            ['‚Ñü', '‚ôö'], // rR
            ['‡ªÇ', '·ª±'], // sS
            ['·µ∞', '‚û¶'], // tT
            ['ƒØ', '‚úñÔ∏è'], // uU
            ['·∏ø', '‡≤≠'], // vV
            ['‚àÆ', '«ø'], // wW
            ['Ôª∏', '‚§±'],
            ['‚ôÖ', '„Ä¥'],
            ['≈±', '„ÇΩ'], // zZ

            // special simv
            ['‚óé', '‚ãî'], // :
            ['‚äó', '‚ã¨'], // ,
            ['‚âõ', '‚ã®'], // .
            ['‚ã∞', '‚äº'], // [
            ['‚ã±', '‚ãΩ'], // ]
            ['‚ãá', '‚àá'], // !
            ['‚àè', '‚ä≠'], // ?
	    ['‚à∫', '‚Ö∏'], // +
	    ['‚Ö∞', '‚âù'], // -
	    ['‚Ñí', '‚Ñª'], // =
	    ['‚Ñ£', '‚Ñ≠'], // /
	    ['‚ãô', '‚âû'], // ;
	    ['„ÄÑ', '‚ú†'], // %
	    ['‚ò¨', '‚ùû'], // *

	    ['·ø≤', '·∂ã'], // {
	    ['·µ±', '‚ñë'], // }
	    ['·ø∏', '·µ´'], // <
	    ['·∂∂', 'Œè'], // >
	    ['·¥•', '·µπ'], // |
	    ['‚óî', 'üîí'], // "
            ['‚ââ', '‚à∞'], // space

            // numbers
            ['‚óü', '‚ññ'], // 0
            ['‚ñô', '‚óú'], // 1
            ['‚ó†', '‚ñú'], // 2
            ['‚ñû', '‚ó°'], // 3
            ['‚óö', '‚úô'], // 4
            ['‚ñò', '‚óõ'], // 5
            ['·∂å', '‚ñó'], // 6
            ['‚óå', '‚ò©'], // 7
            ['‚ó∂', '‚ó¨'], // 8
            ['‚ò†Ô∏è', '‚ó∑'], // 9
        ];
        this._alfabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:,.[]!?+-=/;%*{}<>|' 0123456789";
    }

    get_index_simv(char){
        if (this._alfabet.indexOf(char) >= 25)
            return this._alfabet.indexOf(char) - 25;
        return this._alfabet.indexOf(char);
    }

    encrypt(text){
		try{
			let result = '', text_array = text.split('');
			for(let i = 0; i < text_array.length; i++)
				result += this._simv[this.get_index_simv(text_array[i])][Math.floor(Math.random() * 2)];
			
			let hash_start = '';
			let max_length = Math.floor(Math.random() * 16);
			if (max_length == 0){max_length = 1;}
			for(let i = 0; i < max_length; i++)
				hash_start += this._simv[Math.floor(Math.random() * 43)][Math.floor(Math.random() * 2)];

			let hash_end = '';
			for(let i = 0; i < max_length; i++)
				hash_end += this._simv[Math.floor(Math.random() * 43)][Math.floor(Math.random() * 2)];
			
			let delta = result.length;
			result = hash_start + result + hash_end;
			let keyOf = (hash_start.length - 1).toString() + "," + ((hash_start.length - 1) + (delta)).toString();
			return result + '\nKeyOf: ' + keyOf;
		}
		catch(err){
			alert("Error! the text should consist only of these characters: 'abcdefghijklmnopqrstuvwxyz or ABCDEFGHIJKLMNOPQRSTUVWXYZ and :,.[]! 0123456789'");
		}
    }

	remove(text, start_pos, end_pos){
		let result = '';
		for (let i = start_pos + 1; i < end_pos + 1; i++)
			result += text[i];
		return result;
	}

    decrypt(text, keyof){
		let result_array = this.remove(text, Number(keyof[0]), Number(keyof[1])).split('');
		let decrypt_result = '';
		console.log(result_array)
		for(let i = 0; i < result_array.length; i++){
			let index = 0;
			for (let j = 0; j < this._simv.length; j++){
				if (result_array[i] == this._simv[j][0] || result_array[i] == this._simv[j][1]){
					index = j;
					break;
				}
			}
			if (index > 25 && index < 51)
				index += 25;
			decrypt_result += this._alfabet[index];
		}
		return decrypt_result;    
	}
	
}

let shipher = new ShipherShmith();
